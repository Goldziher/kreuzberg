from __future__ import annotations

from src.types import Framework

FRAMEWORK_SUPPORTED_FORMATS = {
    Framework.KREUZBERG_V3_SYNC: {
        ".pdf",
        ".docx",
        ".doc",
        ".rtf",
        ".txt",
        ".epub",
        ".odt",
        ".xlsx",
        ".xls",
        ".csv",
        ".ods",
        ".pptx",
        ".ppt",
        ".odp",
        ".html",
        ".xml",
        ".mhtml",
        ".md",
        ".png",
        ".jpg",
        ".jpeg",
        ".bmp",
        ".tiff",
        ".gif",
        ".webp",
    },
    Framework.KREUZBERG_V3_ASYNC: {
        ".pdf",
        ".docx",
        ".doc",
        ".rtf",
        ".txt",
        ".epub",
        ".odt",
        ".xlsx",
        ".xls",
        ".csv",
        ".ods",
        ".pptx",
        ".ppt",
        ".odp",
        ".html",
        ".xml",
        ".mhtml",
        ".md",
        ".png",
        ".jpg",
        ".jpeg",
        ".bmp",
        ".tiff",
        ".gif",
        ".webp",
    },
    Framework.KREUZBERG_V4_SYNC: {
        ".pdf",
        ".docx",
        ".doc",
        ".rtf",
        ".txt",
        ".epub",
        ".odt",
        ".xlsx",
        ".xls",
        ".csv",
        ".ods",
        ".pptx",
        ".ppt",
        ".odp",
        ".html",
        ".xml",
        ".mhtml",
        ".md",
        ".png",
        ".jpg",
        ".jpeg",
        ".bmp",
        ".tiff",
        ".gif",
        ".webp",
    },
    Framework.KREUZBERG_V4_ASYNC: {
        ".pdf",
        ".docx",
        ".doc",
        ".rtf",
        ".txt",
        ".epub",
        ".odt",
        ".xlsx",
        ".xls",
        ".csv",
        ".ods",
        ".pptx",
        ".ppt",
        ".odp",
        ".html",
        ".xml",
        ".mhtml",
        ".md",
        ".png",
        ".jpg",
        ".jpeg",
        ".bmp",
        ".tiff",
        ".gif",
        ".webp",
    },
    Framework.DOCLING: {
        ".pdf",
        ".docx",
        ".pptx",
        ".xlsx",
        ".html",
        ".md",
        ".png",
        ".jpg",
        ".jpeg",
        ".tiff",
        ".wav",
        ".mp3",
    },
    Framework.MARKITDOWN: {
        ".pdf",
        ".docx",
        ".xlsx",
        ".xls",
        ".pptx",
        ".html",
        ".epub",
        ".csv",
        ".json",
        ".xml",
        ".rtf",
        ".png",
        ".jpg",
        ".jpeg",
        ".wav",
        ".mp3",
        ".eml",
        ".msg",
        ".zip",
    },
    Framework.UNSTRUCTURED: {
        ".pdf",
        ".docx",
        ".doc",
        ".pptx",
        ".ppt",
        ".xlsx",
        ".xls",
        ".odt",
        ".ods",
        ".odp",
        ".csv",
        ".tsv",
        ".json",
        ".ndjson",
        ".html",
        ".xml",
        ".md",
        ".txt",
        ".rtf",
        ".org",
        ".rst",
        ".epub",
        ".png",
        ".jpg",
        ".jpeg",
        ".heic",
        ".bmp",
        ".tiff",
        ".eml",
        ".msg",
    },
    Framework.EXTRACTOUS: {
        ".pdf",
        ".docx",
        ".doc",
        ".pptx",
        ".ppt",
        ".xlsx",
        ".xls",
        ".rtf",
        ".odt",
        ".ods",
        ".odp",
        ".csv",
        ".tsv",
        ".json",
        ".xml",
        ".html",
        ".md",
        ".txt",
        ".epub",
        ".png",
        ".jpg",
        ".jpeg",
        ".bmp",
        ".tiff",
        ".gif",
        ".ico",
        ".psd",
        ".svg",
        ".eml",
        ".msg",
        ".mbox",
        ".pst",
        ".zip",
        ".tar",
        ".gz",
        ".7z",
        ".rar",
        ".mp3",
        ".mp4",
        ".wav",
        ".avi",
        ".mov",
        ".java",
        ".py",
        ".cpp",
        ".c",
        ".js",
        ".ts",
        ".go",
        ".rs",
        ".rb",
        ".php",
    },
}


def get_supported_formats(framework: Framework | str) -> set[str]:
    if isinstance(framework, str):
        try:
            framework = Framework(framework)
        except ValueError as e:
            raise ValueError(
                f"Unknown framework: {framework}. Valid frameworks: {[f.value for f in Framework]}"
            ) from e

    return FRAMEWORK_SUPPORTED_FORMATS.get(framework, set())


def should_test_file(file_path: str, framework: Framework | str) -> bool:
    from pathlib import Path

    ext = Path(file_path).suffix.lower()
    supported_formats = get_supported_formats(framework)

    return ext in supported_formats
