name: Build Artifacts

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (skip actual artifact uploads)"
        required: false
        type: boolean
        default: false
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    paths:
      - 'crates/**'
      - 'packages/**'
      - '.github/workflows/build-artifacts.yml'
      - '.github/actions/**'

concurrency:
  group: build-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  RUST_BACKTRACE: short
  PDFIUM_VERSION: "7455"

jobs:
  build-wheels:
    name: Build Python wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Build wheels
        uses: ./.github/actions/build-wheels
        with:
          python-version: "3.13"

      - name: List built wheels
        shell: bash
        run: |
          echo "📦 Built wheels:"
          ls -lh ./wheelhouse/*.whl || echo "No wheels found"

  build-sdist:
    name: Build Python sdist
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.13"
          cache-prefix: python-sdist

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build sdist
        run: maturin sdist --manifest-path crates/kreuzberg-py/Cargo.toml --out dist/

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: dist/*.tar.gz
          retention-days: 7

      - name: List built sdist
        run: |
          echo "📦 Built sdist:"
          ls -lh dist/*.tar.gz

  build-napi-bindings:
    name: Build NAPI ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tools (Linux ARMv7)
        if: matrix.settings.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Install cross-compilation tools (Linux musl)
        if: contains(matrix.settings.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Configure cross-compilation linkers
        if: matrix.settings.os == 'ubuntu-latest'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"

          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"

          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          EOF

      - name: Install musl cross-compiler (aarch64)
        if: matrix.settings.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo mkdir -p /usr/local/bin
          echo '#!/bin/sh' | sudo tee /usr/local/bin/aarch64-linux-musl-gcc
          echo 'exec aarch64-linux-gnu-gcc "$@"' | sudo tee -a /usr/local/bin/aarch64-linux-musl-gcc
          sudo chmod +x /usr/local/bin/aarch64-linux-musl-gcc

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.settings.os }}-cargo-napi-${{ matrix.settings.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build NAPI-RS bindings
        working-directory: crates/kreuzberg-node
        run: |
          pnpm install
          pnpm run build --target ${{ matrix.settings.target }}

      - name: Cleanup Rust cache before save
        if: always()
        uses: ./.github/actions/cleanup-rust-cache

      - name: Upload NAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: napi-${{ matrix.settings.target }}
          path: crates/kreuzberg-node/*.node
          retention-days: 7

      - name: List built bindings
        shell: bash
        run: |
          echo "📦 Built NAPI binding for ${{ matrix.settings.target }}:"
          ls -lh crates/kreuzberg-node/*.node || echo "No .node files found"

  build-ruby-gems:
    name: Build Ruby gem (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-x86_64
            platform: x86_64-linux
            build_source_gem: true
          - os: ubuntu-latest
            label: linux-aarch64
            platform: aarch64-linux
            build_source_gem: false
          - os: macos-13
            label: macos-x86_64
            platform: x86_64-darwin
            build_source_gem: false
          - os: macos-14
            label: macos-arm64
            platform: arm64-darwin
            build_source_gem: false
          - os: windows-latest
            label: windows-x64
            platform: x64-mingw32
            build_source_gem: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Setup MSYS2 (Windows)
        id: setup-msys2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        continue-on-error: true
        with:
          path-type: inherit
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-gcc

      - name: Check Windows build requirements
        if: runner.os == 'Windows' && steps.setup-msys2.outcome != 'success'
        run: |
          echo "::warning::Skipping Windows build - MSYS2 setup failed. Ruby native extensions require MSYS2 on Windows."
          echo "::warning::This is a known limitation. Windows support for Ruby bindings is experimental."
          exit 1

      - name: Setup Rust toolchain
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: ruby-${{ matrix.label }}

      - name: Cache Pdfium binaries
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Download Pdfium binaries
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        shell: bash
        run: |
          set -euo pipefail
          platform="$(uname -s)"
          case "$platform" in
            Linux*) platform_id="linux" ;;
            Darwin*) platform_id="mac" ;;
            MINGW*|MSYS*|CYGWIN*) platform_id="win" ;;
            *) echo "Unsupported platform: $platform" >&2; exit 1 ;;
          esac
          arch="$(uname -m)"
          case "$arch" in
            x86_64|amd64) arch_id="x64" ;;
            arm64|aarch64) arch_id="arm64" ;;
            *) echo "Unsupported architecture: $arch" >&2; exit 1 ;;
          esac
          version="${PDFIUM_VERSION:-7455}"
          tmpdir="$(mktemp -d)"
          curl -fsSL -o "$tmpdir/pdfium.tgz" "https://github.com/bblanchon/pdfium-binaries/releases/download/chromium/${version}/pdfium-${platform_id}-${arch_id}.tgz"
          mkdir -p "$tmpdir/extracted"
          tar -xzf "$tmpdir/pdfium.tgz" -C "$tmpdir/extracted"
          dest="$RUNNER_TEMP/pdfium"
          rm -rf "$dest"
          mv "$tmpdir/extracted" "$dest"
          rm -rf "$tmpdir"

      - name: Stage Pdfium runtime artifacts
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        shell: bash
        run: |
          set -euo pipefail
          case "${RUNNER_OS:-unknown}" in
            Windows)
              src="$RUNNER_TEMP/pdfium/bin/pdfium.dll"
              cp -f "$src" "crates/kreuzberg-rb/pdfium.dll"
              cp -f "$src" "packages/ruby/pdfium.dll"
              ;;
            macOS)
              src="$RUNNER_TEMP/pdfium/lib/libpdfium.dylib"
              cp -f "$src" "crates/kreuzberg-rb/libpdfium.dylib"
              cp -f "$src" "packages/ruby/libpdfium.dylib"
              ;;
            Linux)
              src="$RUNNER_TEMP/pdfium/lib/libpdfium.so"
              cp -f "$src" "crates/kreuzberg-rb/libpdfium.so"
              cp -f "$src" "packages/ruby/libpdfium.so"
              ;;
            *)
              echo "Unsupported RUNNER_OS: ${RUNNER_OS:-unknown}" >&2
              exit 1
              ;;
          esac

      - name: Install Ruby dependencies
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        working-directory: packages/ruby
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Build native gem
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        working-directory: packages/ruby
        run: bundle exec rake native:kreuzberg_rb:${{ matrix.platform }} gem

      - name: Build source gem
        if: matrix.build_source_gem && (runner.os != 'Windows' || steps.setup-msys2.outcome == 'success')
        working-directory: packages/ruby
        run: bundle exec rake gem

      - name: Cleanup Rust cache before save
        if: always()
        uses: ./.github/actions/cleanup-rust-cache

      - name: Upload native gem artifact
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: gem-${{ matrix.label }}
          path: packages/ruby/pkg/*.gem
          retention-days: 7

      - name: List built gems
        if: runner.os != 'Windows' || steps.setup-msys2.outcome == 'success'
        shell: bash
        run: |
          echo "📦 Built Ruby gem for ${{ matrix.label }}:"
          ls -lh packages/ruby/pkg/*.gem || echo "No gems found"

  build-cli-binaries:
    name: Build CLI ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: kreuzberg
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: kreuzberg.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: kreuzberg
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: kreuzberg
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cli-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI binary
        run: cargo build --release --target ${{ matrix.target }} --package kreuzberg-cli

      - name: Create tar.gz for Unix-like systems
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf kreuzberg-${{ matrix.target }}.tar.gz ${{ matrix.artifact_name }}
          mv kreuzberg-${{ matrix.target }}.tar.gz ../../../

      - name: Create zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a -tzip kreuzberg-${{ matrix.target }}.zip ${{ matrix.artifact_name }}
          mv kreuzberg-${{ matrix.target }}.zip ../../../

      - name: Cleanup Rust cache before save
        if: always()
        uses: ./.github/actions/cleanup-rust-cache

      - name: Upload CLI binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: |
            kreuzberg-${{ matrix.target }}.tar.gz
            kreuzberg-${{ matrix.target }}.zip
          retention-days: 7

      - name: List built binaries
        shell: bash
        run: |
          echo "📦 Built CLI binary for ${{ matrix.target }}:"
          ls -lh kreuzberg-${{ matrix.target }}.* || echo "No archives found"

  summarize:
    name: Build Summary
    needs:
      - build-wheels
      - build-sdist
      - build-napi-bindings
      - build-ruby-gems
      - build-cli-binaries
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate build summary
        run: |
          echo "# 🏗️ Build Artifacts Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Wheels | ${{ needs.build-wheels.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Sdist | ${{ needs.build-sdist.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NAPI Bindings | ${{ needs.build-napi-bindings.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ruby Gems | ${{ needs.build-ruby-gems.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI Binaries | ${{ needs.build-cli-binaries.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Built Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Python Wheels
          echo "### Python Wheels" >> $GITHUB_STEP_SUMMARY
          wheel_count=$(find artifacts/wheels-* -name "*.whl" 2>/dev/null | wc -l || echo "0")
          echo "- **Count**: $wheel_count wheels" >> $GITHUB_STEP_SUMMARY
          if [ "$wheel_count" -gt 0 ]; then
            echo "- **Files**:" >> $GITHUB_STEP_SUMMARY
            find artifacts/wheels-* -name "*.whl" -exec basename {} \; 2>/dev/null | sort | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Python Sdist
          echo "### Python Sdist" >> $GITHUB_STEP_SUMMARY
          sdist_count=$(find artifacts/python-sdist -name "*.tar.gz" 2>/dev/null | wc -l || echo "0")
          echo "- **Count**: $sdist_count sdist" >> $GITHUB_STEP_SUMMARY
          if [ "$sdist_count" -gt 0 ]; then
            echo "- **Files**:" >> $GITHUB_STEP_SUMMARY
            find artifacts/python-sdist -name "*.tar.gz" -exec basename {} \; 2>/dev/null | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # NAPI Bindings
          echo "### NAPI Bindings" >> $GITHUB_STEP_SUMMARY
          napi_count=$(find artifacts/napi-* -name "*.node" 2>/dev/null | wc -l || echo "0")
          echo "- **Count**: $napi_count bindings" >> $GITHUB_STEP_SUMMARY
          if [ "$napi_count" -gt 0 ]; then
            echo "- **Targets**:" >> $GITHUB_STEP_SUMMARY
            find artifacts/napi-* -type d -name "napi-*" -exec basename {} \; 2>/dev/null | sed 's/napi-/  - /' | sort >> $GITHUB_STEP_SUMMARY || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Ruby Gems
          echo "### Ruby Gems" >> $GITHUB_STEP_SUMMARY
          gem_count=$(find artifacts/gem-* -name "*.gem" 2>/dev/null | wc -l || echo "0")
          echo "- **Count**: $gem_count gems" >> $GITHUB_STEP_SUMMARY
          if [ "$gem_count" -gt 0 ]; then
            echo "- **Files**:" >> $GITHUB_STEP_SUMMARY
            find artifacts/gem-* -name "*.gem" -exec basename {} \; 2>/dev/null | sort | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # CLI Binaries
          echo "### CLI Binaries" >> $GITHUB_STEP_SUMMARY
          cli_count=$(find artifacts/cli-* \( -name "*.tar.gz" -o -name "*.zip" \) 2>/dev/null | wc -l || echo "0")
          echo "- **Count**: $cli_count binaries" >> $GITHUB_STEP_SUMMARY
          if [ "$cli_count" -gt 0 ]; then
            echo "- **Files**:" >> $GITHUB_STEP_SUMMARY
            find artifacts/cli-* \( -name "*.tar.gz" -o -name "*.zip" \) -exec basename {} \; 2>/dev/null | sort | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY || true
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [ "${{ needs.build-wheels.result }}" = "success" ] && \
             [ "${{ needs.build-sdist.result }}" = "success" ] && \
             [ "${{ needs.build-napi-bindings.result }}" = "success" ] && \
             [ "${{ needs.build-ruby-gems.result }}" = "success" ] && \
             [ "${{ needs.build-cli-binaries.result }}" = "success" ]; then
            echo "## ✅ All builds succeeded!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All artifacts are ready for release." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Some builds failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the job details above for more information." >> $GITHUB_STEP_SUMMARY
          fi

          # Dry run notice
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: This was a dry run. No artifacts were published." >> $GITHUB_STEP_SUMMARY
          fi
