name: Docker E2E Tests

on:
  pull_request:
    paths:
      - '.docker/**'
      - 'kreuzberg/**'
      - 'pyproject.toml'
      - 'tests/e2e/**'
      - '.github/workflows/docker-e2e-tests.yml'
  workflow_dispatch:
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  test-docker-images:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        image:
          - { name: "core", extras: "" }
          - { name: "easyocr", extras: "easyocr" }
          - { name: "paddle", extras: "paddleocr" }
          - { name: "gmft", extras: "gmft" }
      fail-fast: false  # Continue testing other images if one fails

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install asyncio  # For comprehensive tests

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc tesseract-ocr jq bc

      - name: Free up disk space
        run: |
          # Show initial disk usage
          echo "Initial disk usage:"
          df -h

          # Remove unnecessary packages to free up space for Docker builds
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          # Clean apt cache
          sudo apt-get clean
          sudo apt-get autoremove -y

          # Clean Docker
          docker system prune -af --volumes

          # Remove swap
          sudo swapoff -a
          sudo rm -f /swapfile

          # Show available space after cleanup
          echo "Available disk space after cleanup:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Configure Docker
        run: |
          # Increase Docker daemon limits
          sudo tee /etc/docker/daemon.json > /dev/null <<EOF
          {
            "max-concurrent-downloads": 10,
            "max-concurrent-uploads": 10,
            "storage-driver": "overlay2"
          }
          EOF

          sudo systemctl restart docker
          docker info

      - name: Build Docker image - ${{ matrix.image.name }}
        run: |
          # Build image with logging
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain

          echo "Building ${{ matrix.image.name }} image..."
          docker build -f .docker/Dockerfile \
            --build-arg EXTRAS="${{ matrix.image.extras }}" \
            -t kreuzberg:${{ matrix.image.name }} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --load \
            .

          # Show built image
          echo "Built image:"
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep kreuzberg:${{ matrix.image.name }} || true

      - name: Run E2E tests - ${{ matrix.image.name }}
        run: |
          # Create log directory
          mkdir -p tests/e2e/logs

          echo "Running E2E tests for ${{ matrix.image.name }}..."
          python3 tests/e2e/docker_images_test.py --image ${{ matrix.image.name }}

      - name: Generate test report - ${{ matrix.image.name }}
        if: always()
        run: |
          # Generate summary report
          if [ -f "tests/e2e/test_report.json" ]; then
            echo "## Test Report Summary for ${{ matrix.image.name }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            jq '.["${{ matrix.image.name }}"]' tests/e2e/test_report.json >> $GITHUB_STEP_SUMMARY || echo "No results for ${{ matrix.image.name }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Collect Docker logs on failure
        if: failure()
        run: |
          # Collect logs from any remaining test containers
          mkdir -p tests/e2e/docker-logs

          for container in $(docker ps -a --filter "name=kreuzberg-test" --format "{{.Names}}"); do
            docker logs "$container" > "tests/e2e/docker-logs/${container}.log" 2>&1 || true
          done

          # Save Docker daemon info
          docker info > tests/e2e/docker-logs/docker-info.txt 2>&1 || true
          docker version > tests/e2e/docker-logs/docker-version.txt 2>&1 || true

      - name: Upload test results - ${{ matrix.image.name }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-e2e-test-results-${{ matrix.image.name }}
          path: |
            tests/e2e/logs/
            tests/e2e/*.log
            tests/e2e/*.json
            tests/e2e/docker-logs/
          retention-days: 7

      - name: Clean up Docker resources
        if: always()
        run: |
          # Stop and remove test containers
          docker ps -aq --filter "name=kreuzberg-test" | xargs -r docker rm -f || true

          # Remove test image to free space for next build
          docker rmi kreuzberg:${{ matrix.image.name }} || true

          # Clean up Docker system
          docker system prune -af --volumes || true

          # Show final disk usage
          echo "Final disk usage after ${{ matrix.image.name }}:"
          df -h
