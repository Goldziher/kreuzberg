name: CI

on:
  pull_request:
    branches:
      - main
      - v4-dev
  push:
    branches:
      - main
      - v4-dev

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Setup Rust Toolchain for Build
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
              echo "Removing existing .venv directory on Windows"
              rm -rf .venv
            fi
            uv sync --all-extras --dev
            uv run maturin develop --release
          shell: bash

      - name: Install prek
        run: |
          # Install prek using uv (recommended method)
          uv tool install prek
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Load Cached Prek Dependencies
        id: cached-prek-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/prek/
          key: prek|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Prek
        run: prek run --show-diff-on-failure --color=always --all-files

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "."

      - name: Check Rust Formatting
        run: cargo fmt --check

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Build Rust Extension
        run: cargo build --release

  coverage:
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v6
        id: setup-python
        with:
          python-version: "3.13"

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-ubuntu-latest-3.13-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-ubuntu-latest-3.13-

      - name: Setup Rust Toolchain for Build
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            uv sync --all-extras --dev
            uv run maturin develop --release
          shell: bash

      - name: Install System Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-deu pandoc
          shell: bash

      - name: Run Tests with Coverage
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            uv run coverage erase
            uv run pytest -s -vvv --cov=kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term --cov-config=pyproject.toml --reruns 2 --reruns-delay 1
            uv run coverage report --precision=2
          shell: bash

      - name: Upload Coverage to DeepSource
        if: always() && secrets.DEEPSOURCE_DSN != '' && needs.test-pr.result == 'success'
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          # Install DeepSource CLI
          curl -fsSL https://deepsource.io/cli | sh
          # Upload coverage report
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.lcov

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage.lcov
            .coverage
          retention-days: 7

  test-pr:
    needs: validate
    if: github.event_name == 'pull_request' && needs.validate.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v6
        id: setup-python
        with:
          python-version: "3.13"

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-ubuntu-latest-3.13-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-ubuntu-latest-3.13-

      - name: Setup Rust Toolchain for Build
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            uv sync --all-extras --dev
            uv run maturin develop --release
          shell: bash

      - name: Install System Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-deu pandoc
          shell: bash

      - name: Run All Tests with Coverage
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            uv run coverage erase
            uv run pytest -s -vvv --cov=kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term --cov-config=pyproject.toml --reruns 2 --reruns-delay 1
            uv run coverage report --precision=2
          shell: bash

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pr-${{ github.sha }}
          path: |
            coverage.lcov
            .coverage
          retention-days: 1

  coverage-pr:
    needs: test-pr
    if: github.event_name == 'pull_request' && needs.test-pr.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v5
        with:
          name: coverage-pr-${{ github.sha }}

      - name: Upload Coverage to DeepSource
        if: always() && secrets.DEEPSOURCE_DSN != '' && needs.test-pr.result == 'success'
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          # Install DeepSource CLI
          curl -fsSL https://deepsource.io/cli | sh
          # Upload coverage report
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.lcov
