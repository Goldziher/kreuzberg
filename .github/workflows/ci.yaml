name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
              echo "Removing existing .venv directory on Windows"
              rm -rf .venv
            fi
            uv sync --all-packages --all-extras --all-groups
          shell: bash

      - name: Install prek
        run: |
          # Install prek using uv (recommended method)
          uv tool install prek
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Load Cached Prek Dependencies
        id: cached-prek-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/prek/
          key: prek|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Prek
        run: prek run --show-diff-on-failure --color=always --all-files

  coverage:
    needs: [validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v6
        id: setup-python
        with:
          python-version: "3.13"

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-ubuntu-latest-3.13-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-ubuntu-latest-3.13-

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            uv sync --all-packages --all-extras --all-groups
          shell: bash

      - name: Install System Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-deu pandoc
          shell: bash

      - name: Install SpaCy Model for Testing
        run: |
          uv pip install "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl"

      - name: Cache HuggingFace Models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: huggingface-models-gmft-v1-${{ runner.os }}
          restore-keys: |
            huggingface-models-gmft-v1-

      - name: Download GMFT Models if Not Cached
        env:
          HF_HOME: ~/.cache/huggingface
        run: |
          if [ ! -d ~/.cache/huggingface ] || [ -z "$(ls -A ~/.cache/huggingface 2>/dev/null)" ]; then
            echo "Cache miss - downloading GMFT models..."
            uv run --script scripts/download_gmft_models.py
          else
            echo "Using cached GMFT models"
          fi

      - name: Run Tests with Coverage
        uses: nick-fields/retry@v3
        env:
          HF_HOME: ~/.cache/huggingface
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            uv run coverage erase
            uv run pytest -s -vvv --cov=kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term --cov-config=pyproject.toml --reruns 2 --reruns-delay 1 --ignore=tests/benchmarks/
            uv run coverage report --precision=2
          shell: bash

      - name: Upload Coverage to DeepSource
        if: always() && needs.python-tests-pr.result == 'success'
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          # Install DeepSource CLI
          curl -fsSL https://deepsource.io/cli | sh
          # Upload coverage report
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.lcov

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage.lcov
            .coverage
          retention-days: 7

  python-tests:
    if: needs.validate.result == 'success'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10", "3.13"]
        test-category:
          - name: "core"
            path: "tests/core,tests/utils"
            system-deps: false
            timeout: 20
          - name: "extractors"
            path: "tests/extractors"
            system-deps: true
            timeout: 25
          - name: "integration"
            path: "tests/integration,tests/api"
            system-deps: true
            timeout: 30
          - name: "features"
            path: "tests/features,tests/interfaces,tests/mcp,tests/multiprocessing,tests/ocr"
            system-deps: true
            timeout: 25
          - name: "benchmarks"
            path: "benchmarks/tests"
            system-deps: false
            timeout: 15
    timeout-minutes: ${{ matrix.test-category.timeout }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v6
        id: setup-python
        with:
          python-version: ${{ matrix.python }}

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-${{ matrix.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-${{ matrix.os }}-${{ matrix.python }}-

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
              echo "Removing existing .venv directory on Windows"
              rm -rf .venv
            fi
            uv sync --all-packages --all-extras --all-groups
          shell: bash

      - name: Cache Test Artifacts
        uses: actions/cache@v4
        with:
          path: .pytest_cache/
          key: pytest-cache-${{ matrix.os }}-${{ matrix.python }}

      - name: Cache and Install Homebrew (macOS)
        if: runner.os == 'macOS'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            # Using the underlying homebrew commands instead of the action
            brew update || true
            brew install tesseract tesseract-lang pandoc || brew upgrade tesseract tesseract-lang pandoc || true
            brew list tesseract tesseract-lang pandoc
          shell: bash

      - name: Cache and Install APT Packages (Linux)
        if: runner.os == 'Linux'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-deu pandoc
          shell: bash

      - name: Install System Dependencies (Windows)
        if: runner.os == 'Windows'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            choco install -y tesseract pandoc --no-progress
            Write-Output "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            Write-Output "C:\Program Files\Pandoc" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            $env:PATH = "C:\Program Files\Tesseract-OCR;C:\Program Files\Pandoc;" + $env:PATH
            tesseract --version
            pandoc --version
          shell: pwsh

      - name: Install SpaCy Model for Testing
        if: matrix.test-category.system-deps
        run: |
          uv pip install "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl"

      - name: Cache HuggingFace Models
        if: contains(matrix.test-category.path, 'gmft')
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: huggingface-models-gmft-v1-${{ runner.os }}
          restore-keys: |
            huggingface-models-gmft-v1-

      - name: Download GMFT Models if Not Cached
        if: contains(matrix.test-category.path, 'gmft')
        env:
          HF_HOME: ~/.cache/huggingface
        run: |
          if [ ! -d ~/.cache/huggingface ] || [ -z "$(ls -A ~/.cache/huggingface 2>/dev/null)" ]; then
            echo "Cache miss - downloading GMFT models..."
            uv run --script scripts/download_gmft_models.py
          else
            echo "Using cached GMFT models"
          fi

      - name: Run Tests - ${{ matrix.test-category.name }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 2
          retry_wait_seconds: 5
          command: |
            # Run tests from specified paths, explicitly excluding benchmarks
            uv run pytest $(echo "${{ matrix.test-category.path }}" | tr ',' ' ') -v --reruns 1 --reruns-delay 1 --ignore=tests/benchmarks/
          shell: bash
