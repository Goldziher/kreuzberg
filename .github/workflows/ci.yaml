name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Pdfium version control - update these to upgrade pdfium
  # See: https://github.com/bblanchon/pdfium-binaries/releases
  PDFIUM_VERSION: "7455"
  # See: https://github.com/paulocoutinhox/pdfium-lib/releases
  PDFIUM_WASM_VERSION: "7469"

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        id: setup-python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.13'

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-validate

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Load Cached Prek Dependencies
        id: cached-prek-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/prek/
          key: prek|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Prek
        run: uv run prek run --show-diff-on-failure --color=always --all-files

  rust-tests:
    needs:
      - validate
    runs-on: ${{ matrix.os }}
    env:
      KREUZBERG_CI_DEBUG: "1"
      RUSTFLAGS: "--cap-lints=warn"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        id: setup-python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.13'

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-tests-${{ matrix.os }}

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Install system dependencies for integration tests
        uses: ./.github/actions/install-system-deps

      - name: Generate Rust coverage (unit tests)
        run: cargo llvm-cov --no-default-features --lib --bins --lcov --output-path rust-coverage-unit.lcov

      - name: Generate Rust coverage (integration tests with all features)
        run: cargo llvm-cov --features full --tests --lcov --output-path rust-coverage-integration.lcov

      - name: Upload coverage to DeepSource
        if: always() && env.DEEPSOURCE_DSN != ''
        shell: bash
        run: |
          curl -fsSL https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key rust --value-file ./rust-coverage.lcov

  python-tests:
    needs:
      - validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.10", "3.13"]
    env:
      DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        id: setup-python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python }}

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-python-${{ matrix.os }}-${{ matrix.python }}

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps

      - name: Install SpaCy model for testing
        run: |
          uv pip install "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl"

      - name: Cache TATR models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: huggingface-models-tatr-v1-${{ runner.os }}
          restore-keys: |
            huggingface-models-tatr-v1-

      - name: Download TATR models if not cached
        env:
          TRANSFORMERS_CACHE: ~/.cache/huggingface
        run: |
          if [ ! -d ~/.cache/huggingface ] || [ -z "$(ls -A ~/.cache/huggingface 2>/dev/null)" ]; then
            echo "Cache miss - downloading TATR models..."
            uv run python scripts/download_tatr_models.py
          else
            echo "Using cached TATR models"
          fi

      - name: Run test suite with coverage
        env:
          HF_HOME: ~/.cache/huggingface
          TRANSFORMERS_CACHE: ~/.cache/huggingface
        shell: bash
        run: uv run pytest -vv --cov=kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term --cov-config=pyproject.toml --reruns 1 --reruns-delay 1 --ignore=tests/benchmarks/

      - name: Upload coverage to DeepSource
        if: always() && env.DEEPSOURCE_DSN != ''
        shell: bash
        run: |
          curl -fsSL https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.lcov

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python }}-${{ github.sha }}
          path: |
            coverage.lcov
            rust-coverage.lcov
            rust-coverage-unit.lcov
            rust-coverage-integration.lcov
            .coverage
          retention-days: 7


  node-bindings:
    needs:
      - validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt, clippy
          cache-key-prefix: rust-node-${{ matrix.os }}

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Setup Node workspace
        uses: ./.github/actions/setup-node-workspace
        with:
          node-version: "20"

      - name: Build NAPI-RS bindings
        working-directory: crates/kreuzberg-node
        run: |
          pnpm build

      - name: Update workspace symlinks to include generated files
        run: |
          rm -rf packages/typescript/node_modules/kreuzberg-node
          pnpm install

      - name: Verify NAPI bindings were created
        working-directory: crates/kreuzberg-node
        shell: bash
        run: |
          echo "Checking for .node files..."
          ls -lah *.node || echo "No .node files found in crates/kreuzberg-node/"
          echo ""
          echo "Checking generated index.js..."
          ls -lah index.js index.d.ts || echo "Generated files not found"

      - name: Build TypeScript SDK
        working-directory: packages/typescript
        run: |
          pnpm build

      - name: Debug binding resolution from TypeScript package
        working-directory: packages/typescript
        shell: bash
        run: |
          echo "Attempting to load kreuzberg-node from TypeScript package context..."
          node -e "try { const binding = require('kreuzberg-node'); console.log('✓ Binding loaded successfully'); console.log('Available exports:', Object.keys(binding)); } catch(e) { console.error('✗ Failed to load binding:', e.message); console.error('Stack:', e.stack); process.exit(1); }"

      - name: Run TypeScript tests without coverage
        if: matrix.os != 'ubuntu-latest'
        working-directory: packages/typescript
        run: |
          pnpm test

      - name: Run TypeScript tests with coverage
        if: matrix.os == 'ubuntu-latest'
        working-directory: packages/typescript
        run: |
          pnpm test:coverage

      - name: Run Rust tests for NAPI bindings
        working-directory: crates/kreuzberg-node
        env:
          RUST_BACKTRACE: 1
        run: |
          cargo test --release

      - name: Upload TypeScript coverage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ts-coverage-${{ github.sha }}
          path: packages/typescript/coverage/
          retention-days: 7
