name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PDFIUM_VERSION: "7455"
  PDFIUM_WASM_VERSION: "7469"

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.13'

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: lint

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Run Prek linters
        run: uv run prek run --show-diff-on-failure --color=always --all-files

  rust-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      KREUZBERG_CI_DEBUG: "1"
      RUSTFLAGS: "--cap-lints=warn"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.13'

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-linux

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps

      - name: Install llvm-tools-preview
        run: rustup component add llvm-tools-preview

      - name: Generate Rust coverage
        run: cargo llvm-cov --workspace --no-default-features --features full --exclude kreuzberg-py --lcov --output-path rust-coverage.lcov

      - name: Upload Rust coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-coverage-${{ github.sha }}
          path: rust-coverage.lcov
          retention-days: 7

      - name: Upload Rust coverage to DeepSource
        if: env.DEEPSOURCE_DSN != ''
        shell: bash
        run: |
          curl -fsSL https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key rust --value-file ./rust-coverage.lcov

  rust-cross:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-cross-${{ matrix.os }}

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps

      - name: Run Rust tests
        run: cargo test --workspace --no-default-features --exclude kreuzberg-py

  python-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      HF_HOME: ~/.cache/huggingface
      TRANSFORMERS_CACHE: ~/.cache/huggingface
      DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.10'

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: python

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps

      - name: Install SpaCy model
        run: |
          uv pip install "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl"

      - name: Cache HuggingFace models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: huggingface-models-ci-${{ runner.os }}

      - name: Download TATR models if needed
        run: |
          if [ ! -d ~/.cache/huggingface ] || [ -z "$(ls -A ~/.cache/huggingface 2>/dev/null)" ]; then
            uv run python scripts/download_tatr_models.py
          fi

      - name: Run Python test suite with coverage
        run: uv run pytest -vv --cov=kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term --cov-config=pyproject.toml --reruns 1 --reruns-delay 1 --ignore=tests/benchmarks/

      - name: Upload Python coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-${{ github.sha }}
          path: |
            coverage.lcov
            .coverage
          retention-days: 7

      - name: Upload Python coverage to DeepSource
        if: env.DEEPSOURCE_DSN != ''
        shell: bash
        run: |
          curl -fsSL https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.lcov

  node-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: node

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Prepare Pdfium runtime for Node bindings
        shell: bash
        run: |
          set -euo pipefail
          platform="$(uname -s)"
          case "$platform" in
            Linux*) platform_id="linux" ;;
            Darwin*) platform_id="mac" ;;
            MINGW*|MSYS*|CYGWIN*) platform_id="win" ;;
            *) echo "Unsupported platform: $platform" >&2; exit 1 ;;
          esac
          arch="$(uname -m)"
          case "$arch" in
            x86_64|amd64) arch_id="x64" ;;
            arm64|aarch64) arch_id="arm64" ;;
            *) echo "Unsupported architecture: $arch" >&2; exit 1 ;;
          esac
          version="${PDFIUM_VERSION:-7455}"
          tmpdir="$(mktemp -d)"
          curl -fsSL -o "$tmpdir/pdfium.tgz" "https://github.com/bblanchon/pdfium-binaries/releases/download/chromium/${version}/pdfium-${platform_id}-${arch_id}.tgz"
          mkdir -p "$tmpdir/extracted"
          tar -xzf "$tmpdir/pdfium.tgz" -C "$tmpdir/extracted"
          dest="$RUNNER_TEMP/pdfium-prebuilt"
          rm -rf "$dest"
          mv "$tmpdir/extracted" "$dest"
          rm -rf "$tmpdir"
          echo "KREUZBERG_PDFIUM_PREBUILT=$dest" >> "$GITHUB_ENV"

      - name: Stage Pdfium runtime artifacts
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${KREUZBERG_PDFIUM_PREBUILT:-}" ]; then
            echo "KREUZBERG_PDFIUM_PREBUILT is not set" >&2
            exit 1
          fi
          mkdir -p crates/kreuzberg-node packages/python/kreuzberg
          case "${RUNNER_OS:-unknown}" in
            Windows)
              bin_dir="$KREUZBERG_PDFIUM_PREBUILT/bin"
              lib_dir="$KREUZBERG_PDFIUM_PREBUILT/lib"
              cp -f "$bin_dir/pdfium.dll" "crates/kreuzberg-node/pdfium.dll"
              cp -f "$bin_dir/pdfium.dll" "packages/python/kreuzberg/pdfium.dll"
              if [ -f "$lib_dir/pdfium.dll.lib" ]; then
                cp -f "$lib_dir/pdfium.dll.lib" "$lib_dir/pdfium.lib"
              fi
              ;;
            macOS)
              lib_path="$KREUZBERG_PDFIUM_PREBUILT/lib/libpdfium.dylib"
              cp -f "$lib_path" "crates/kreuzberg-node/libpdfium.dylib"
              cp -f "$lib_path" "packages/python/kreuzberg/libpdfium.dylib"
              ;;
            Linux)
              lib_path="$KREUZBERG_PDFIUM_PREBUILT/lib/libpdfium.so"
              cp -f "$lib_path" "crates/kreuzberg-node/libpdfium.so"
              cp -f "$lib_path" "packages/python/kreuzberg/libpdfium.so"
              ;;
            *)
              echo "Unsupported RUNNER_OS: ${RUNNER_OS:-unknown}" >&2
              exit 1
              ;;
          esac
      - name: Setup Node workspace
        uses: ./.github/actions/setup-node-workspace
        with:
          node-version: "20"

      - name: Install dependencies
        run: pnpm install

      - name: Build NAPI-RS bindings
        working-directory: crates/kreuzberg-node
        run: pnpm run build

      - name: Run TypeScript tests with coverage
        working-directory: packages/typescript
        run: pnpm test:coverage

      - name: Upload TypeScript coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ts-coverage-${{ github.sha }}
          path: packages/typescript/coverage/
          retention-days: 7

  ruby-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: ruby

      - name: Cache Pdfium binaries
        uses: ./.github/actions/cache-pdfium
        with:
          pdfium-version: ${{ env.PDFIUM_VERSION }}

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps

      - name: Install Ruby dependencies
        working-directory: crates/kreuzberg-rb
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Build Ruby native extension
        working-directory: crates/kreuzberg-rb
        run: bundle exec rake compile

      - name: Run RuboCop
        working-directory: crates/kreuzberg-rb
        run: bundle exec rubocop

      - name: Run Ruby tests
        working-directory: crates/kreuzberg-rb
        run: bundle exec rspec --format documentation
