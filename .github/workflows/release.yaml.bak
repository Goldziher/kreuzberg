name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish (e.g., v4.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  RUST_BACKTRACE: short

jobs:
  build-cli-binaries:
    name: Build CLI ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: kreuzberg
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: kreuzberg
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: kreuzberg.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: kreuzberg
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: kreuzberg
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cli-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI binary
        run: cargo build --release --target ${{ matrix.target }} --package kreuzberg-cli

      - name: Create tar.gz for Unix-like systems
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf kreuzberg-${{ matrix.target }}.tar.gz ${{ matrix.artifact_name }}
          mv kreuzberg-${{ matrix.target }}.tar.gz ../../../

      - name: Create zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a -tzip kreuzberg-${{ matrix.target }}.zip ${{ matrix.artifact_name }}
          mv kreuzberg-${{ matrix.target }}.zip ../../../

      - name: Upload CLI binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: |
            kreuzberg-${{ matrix.target }}.tar.gz
            kreuzberg-${{ matrix.target }}.zip
          retention-days: 1

  build-napi-bindings:
    name: Build NAPI ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.os }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tools (Linux ARMv7)
        if: matrix.settings.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Install cross-compilation tools (Linux musl)
        if: contains(matrix.settings.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Configure cross-compilation linkers
        if: matrix.settings.os == 'ubuntu-latest'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"

          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"

          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          EOF

      - name: Install musl cross-compiler (aarch64)
        if: matrix.settings.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo mkdir -p /usr/local/bin
          echo '#!/bin/sh' | sudo tee /usr/local/bin/aarch64-linux-musl-gcc
          echo 'exec aarch64-linux-gnu-gcc "$@"' | sudo tee -a /usr/local/bin/aarch64-linux-musl-gcc
          sudo chmod +x /usr/local/bin/aarch64-linux-musl-gcc

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.settings.os }}-cargo-napi-${{ matrix.settings.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build NAPI-RS bindings
        working-directory: crates/kreuzberg-node
        run: |
          pnpm install
          pnpm run build --target ${{ matrix.settings.target }}

      - name: Upload NAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: napi-${{ matrix.settings.target }}
          path: crates/kreuzberg-node/*.node
          retention-days: 1

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}
          submodules: recursive

      - name: Build wheels
        uses: ./.github/actions/build-wheels
        with:
          python-version: "3.13"

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}
          submodules: recursive

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.13"
          cache-prefix: python-sdist

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build sdist
        run: maturin sdist --manifest-path crates/kreuzberg-py/Cargo.toml

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/*.tar.gz
          retention-days: 1

  create-github-release:
    name: Create GitHub Release
    needs: [build-cli-binaries, build-napi-bindings]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Download all artifacts
        uses: actions/download-artifact@v5

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
          else
            tag=${GITHUB_REF#refs/tags/}
          fi
          version=${tag#v}
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ steps.version.outputs.tag }}"

          # Check if release already exists
          if gh release view "$tag" >/dev/null 2>&1; then
            echo "Release $tag already exists, deleting to recreate..."
            gh release delete "$tag" --yes --cleanup-tag
          fi

          # Create release
          gh release create "$tag" \
            --title "Release $tag" \
            --notes "$(cat <<'EOF'
          ## What's Changed

          See the [CHANGELOG](https://github.com/Goldziher/kreuzberg/blob/main/CHANGELOG.md) for full details.

          ## Installation

          ### Python (PyPI)
          ```bash
          pip install kreuzberg
          ```

          ### Node.js / Bun
          ```bash
          npm install kreuzberg
          ```

          ### Homebrew
          ```bash
          brew tap goldziher/tap
          brew install kreuzberg
          ```

          ### Rust/Cargo
          ```bash
          cargo install kreuzberg-cli
          ```

          ### Direct Download
          Download the appropriate binary for your platform below.
          EOF
          )"

          # Upload CLI binaries
          for artifact in cli-*/; do
            files=$(find "$artifact" -name "*.tar.gz" -o -name "*.zip")
            for file in $files; do
              gh release upload "$tag" "$file"
            done
          done

          # Upload NAPI binaries
          for artifact in napi-*/; do
            files=$(find "$artifact" -name "*.node")
            for file in $files; do
              gh release upload "$tag" "$file"
            done
          done

  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v5
        with:
          pattern: "wheels-*"
          merge-multiple: true
          path: dist/

      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: sdist
          path: dist/

      - name: List artifacts
        run: |
          echo "📦 Packages to publish:"
          ls -lh dist/
          echo ""
          echo "Wheels: $(ls -1 dist/*.whl 2>/dev/null | wc -l)"
          echo "Sdist: $(ls -1 dist/*.tar.gz 2>/dev/null | wc -l)"

      - name: Publish to PyPI
        if: ${{ !inputs.dry_run }}
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Dry run - Skip PyPI publish
        if: ${{ inputs.dry_run }}
        run: |
          echo "🔍 DRY RUN: Would publish to PyPI:"
          echo ""
          echo "Wheels:"
          ls -1 dist/*.whl 2>/dev/null || echo "No wheels found"
          echo ""
          echo "Source distribution:"
          ls -1 dist/*.tar.gz 2>/dev/null || echo "No sdist found"

  publish-npm:
    name: Publish kreuzberg to npm
    needs: create-github-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Download NAPI artifacts from release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}"

          # Download all NAPI binaries from the release
          cd crates/kreuzberg-node
          gh release download "$tag" --pattern "*.node" --dir . || echo "No .node files found in release"

      - name: Install dependencies
        working-directory: crates/kreuzberg-node
        run: pnpm install

      - name: Build Node bindings
        working-directory: crates/kreuzberg-node
        run: pnpm run build

      - name: Publish to npm
        if: ${{ !inputs.dry_run }}
        working-directory: crates/kreuzberg-node
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing kreuzberg-node..."
          pnpm publish --access public --no-git-checks

      - name: Dry run - Skip npm publish
        if: ${{ inputs.dry_run }}
        run: |
          echo "🔍 DRY RUN: Would publish kreuzberg-node to npm"
          ls -la crates/kreuzberg-node/*.node || echo "No .node files"

  update-homebrew:
    name: Update Homebrew Formula
    needs: create-github-release
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: kreuzberg
          formula-path: Formula/kreuzberg.rb
          homebrew-tap: Goldziher/homebrew-tap
          download-url: https://github.com/Goldziher/kreuzberg/archive/${{ needs.create-github-release.outputs.tag }}.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
