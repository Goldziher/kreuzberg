name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  RUST_BACKTRACE: short

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install maturin
        run: pip install maturin

      - name: Build sdist
        run: maturin sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/*.tar.gz
          retention-days: 1

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==3.2.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp310-*

          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: AMD64

          CIBW_BUILD_FRONTEND: "build"
          CIBW_BUILD_VERBOSITY: 1

          CIBW_BEFORE_ALL_LINUX: >
            yum install -y openssl-devel pkgconfig &&
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
            source ~/.cargo/env
          CIBW_BEFORE_ALL_MACOS: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && source ~/.cargo/env
          CIBW_BEFORE_ALL_WINDOWS: >
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
            refreshenv

          CIBW_BEFORE_BUILD: pip install --upgrade pip maturin build

          CIBW_ENVIRONMENT: MATURIN_BUILD_ARGS="--compatibility linux"
          CIBW_ENVIRONMENT_WINDOWS: MATURIN_BUILD_ARGS=""
          CIBW_ENVIRONMENT_MACOS: MATURIN_BUILD_ARGS=""

          CIBW_SKIP: "*-musllinux* *-win32 *-manylinux_i686"

          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
          retention-days: 1

  publish:
    name: Publish to PyPI
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: Download wheels (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest
          path: dist/

      - name: Download wheels (Windows)
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows-latest
          path: dist/

      - name: Download wheels (macOS)
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos-latest
          path: dist/

      - name: List distribution files
        run: ls -lh dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Docker Build Info
        run: |
          echo "Docker images will be built automatically by the publish-docker.yml workflow"
          echo "triggered by this release event. No manual triggering needed."
