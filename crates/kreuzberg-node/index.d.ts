/* auto-generated by NAPI-RS */
/* eslint-disable */
/** Batch extract from multiple byte arrays (asynchronous) */
export declare function batchExtractBytes(dataList: Array<Buffer>, mimeTypes: Array<string>, config?: JsExtractionConfig | undefined | null): Promise<Array<JsExtractionResult>>

/** Batch extract from multiple byte arrays (synchronous) */
export declare function batchExtractBytesSync(dataList: Array<Buffer>, mimeTypes: Array<string>, config?: JsExtractionConfig | undefined | null): Array<JsExtractionResult>

/** Batch extract from multiple files (asynchronous) */
export declare function batchExtractFiles(paths: Array<string>, config?: JsExtractionConfig | undefined | null): Promise<Array<JsExtractionResult>>

/** Batch extract from multiple files (synchronous) */
export declare function batchExtractFilesSync(paths: Array<string>, config?: JsExtractionConfig | undefined | null): Array<JsExtractionResult>

/** Clear all registered postprocessors */
export declare function clearPostProcessors(): void

/** Extract content from bytes (asynchronous) */
export declare function extractBytes(data: Buffer, mimeType: string, config?: JsExtractionConfig | undefined | null): Promise<JsExtractionResult>

/** Extract content from bytes (synchronous) */
export declare function extractBytesSync(data: Buffer, mimeType: string, config?: JsExtractionConfig | undefined | null): JsExtractionResult

/** Extract content from a file (asynchronous) */
export declare function extractFile(filePath: string, mimeType?: string | undefined | null, config?: JsExtractionConfig | undefined | null): Promise<JsExtractionResult>

/** Extract content from a file (synchronous) */
export declare function extractFileSync(filePath: string, mimeType?: string | undefined | null, config?: JsExtractionConfig | undefined | null): JsExtractionResult

export interface JsChunkingConfig {
  maxChars?: number
  maxOverlap?: number
}

export interface JsExtractionConfig {
  useCache?: boolean
  enableQualityProcessing?: boolean
  ocr?: JsOcrConfig
  forceOcr?: boolean
  chunking?: JsChunkingConfig
  images?: JsImageExtractionConfig
  pdfOptions?: JsPdfConfig
  tokenReduction?: JsTokenReductionConfig
  languageDetection?: JsLanguageDetectionConfig
  postprocessor?: JsPostProcessorConfig
  maxConcurrentExtractions?: number
}

export interface JsExtractionResult {
  content: string
  mimeType: string
  metadata: string
  tables: Array<JsTable>
  detectedLanguages?: Array<string>
  chunks?: Array<string>
}

export interface JsImageExtractionConfig {
  extractImages?: boolean
  targetDpi?: number
  maxImageDimension?: number
  autoAdjustDpi?: boolean
  minDpi?: number
  maxDpi?: number
}

export interface JsLanguageDetectionConfig {
  enabled?: boolean
  minConfidence?: number
  detectMultiple?: boolean
}

export interface JsOcrConfig {
  backend: string
  language?: string
  tesseractConfig?: JsTesseractConfig
}

export interface JsPdfConfig {
  extractImages?: boolean
  passwords?: Array<string>
  extractMetadata?: boolean
}

export interface JsPostProcessorConfig {
  enabled?: boolean
  enabledProcessors?: Array<string>
  disabledProcessors?: Array<string>
}

export interface JsTable {
  cells: Array<Array<string>>
  markdown: string
  pageNumber: number
}

export interface JsTesseractConfig {
  psm?: number
  enableTableDetection?: boolean
  tesseditCharWhitelist?: string
}

export interface JsTokenReductionConfig {
  mode?: string
  preserveImportantWords?: boolean
}

/**
 * Register a custom OCR backend
 *
 * **Note**: Full implementation requires JavaScript callback support.
 * Currently throws an error - implementation in progress.
 */
export declare function registerOcrBackend(backend: object): void

/**
 * Register a custom postprocessor
 *
 * **Note**: Full implementation requires JavaScript callback support.
 * Currently throws an error - implementation in progress.
 */
export declare function registerPostProcessor(processor: object): void

/** Unregister a postprocessor by name */
export declare function unregisterPostProcessor(name: string): void
