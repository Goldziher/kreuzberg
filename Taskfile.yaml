version: "3"

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

tasks:
  setup:
    desc: "Install dependencies with uv and build Rust components"
    cmds:
      - uv sync --all-extras --all-packages --all-groups
      - uv pip install maturin
      - maturin develop --release
      - prek install && prek install --hook-type commit-msg

  update:
    desc: "Update Python and Rust dependencies"
    cmds:
      - uv run uv-bump
      - cd benchmarks && uv run uv-bump && cd ..
      - cargo upgrade --incompatible
      - uv sync --all-extras --all-packages --all-groups --upgrade
      - maturin develop --release
      - prek autoupdate

  test:python:
    desc: "Run Python tests with pytest"
    cmds:
      - uv run pytest packages/python/tests/ -v

  test:cov:
    desc: "Run Python tests with coverage"
    cmds:
      - uv run pytest packages/python/tests/ --cov=packages/python/kreuzberg --cov-report=term

  test:rust:
    desc: "Run Rust tests"
    cmds:
      - cargo test --release

  cov:rust:
    desc: "Generate Rust code coverage report (requires cargo-llvm-cov)"
    cmds:
      - cargo llvm-cov --no-default-features --lcov --output-path coverage.info
      - echo "Rust coverage report generated at coverage.info"
      - cargo llvm-cov --no-default-features --summary-only

  cov:python:
    desc: "Generate Python code coverage report"
    cmds:
      - uv run pytest packages/python/tests/ --cov=packages/python/kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term
      - echo "Python coverage report generated at coverage.lcov"

  cov:all:
    desc: "Generate both Rust and Python coverage reports"
    cmds:
      - task: cov:rust
      - task: cov:python

  test:
    desc: "Run both Rust and Python tests"
    cmds:
      - task test:rust
      - task test:python

  lint:
    desc: "Lint Python code with ruff/prek and Rust code with clippy/fmt"
    cmds:
      - prek run --all-files

  fmt:
    desc: "Format Python and Rust code"
    cmds:
      - cargo fmt
      - prek run ruff-format --all-files

  build:
    desc: "Build Rust components for development"
    cmds:
      - maturin develop --release

  build:debug:
    desc: "Build Rust components in debug mode"
    cmds:
      - maturin develop

  docs:build:
    desc: "Build documentation"
    cmds:
      - uv run mkdocs build --clean --strict

  docs:serve:
    desc: "Serve documentation locally"
    cmds:
      - uv run mkdocs serve

  bench:quick:
    desc: "Run quick benchmarks (tiny/small/medium categories)"
    cmds:
      - cd benchmarks && uv run python -m src.cli benchmark --framework kreuzberg_sync,kreuzberg_async --category tiny,small,medium --iterations 1 --timeout 300

  bench:all:
    desc: "Run all benchmarks (all categories, all frameworks)"
    cmds:
      - cd benchmarks && uv run python -m src.cli benchmark --framework kreuzberg_sync,kreuzberg_async --category all --iterations 3 --timeout 1800

  bench:kreuzberg:
    desc: "Run Kreuzberg benchmarks (sync and async)"
    cmds:
      - cd benchmarks && uv run python -m src.cli benchmark --framework kreuzberg_sync,kreuzberg_async --iterations 3

  bench:compare:
    desc: "Compare Kreuzberg v3 vs v4"
    cmds:
      - cd benchmarks && uv run python -m src.cli benchmark --framework kreuzberg_sync,kreuzberg_v3 --category small --iterations 3

  bench:report:
    desc: "Generate benchmark report"
    cmds:
      - cd benchmarks && uv run python -m src.cli report --output-format html

  bench:visualize:
    desc: "Generate benchmark visualizations"
    cmds:
      - cd benchmarks && uv run python -m src.cli visualize

  bench:aggregate:
    desc: "Aggregate benchmark results"
    cmds:
      - cd benchmarks && uv run python -m src.cli aggregate

  bench:clean-cache:
    desc: "Clean Kreuzberg cache before benchmarking"
    cmds:
      - rm -rf .kreuzberg
      - rm -rf benchmarks/.kreuzberg

  bench:full:
    desc: "Run full benchmarking pipeline with reports"
    cmds:
      - task: bench:clean-cache
      - task: bench:all
      - task: bench:aggregate
      - task: bench:report
      - task: bench:visualize

  bench:test:
    desc: "Run benchmarks tests"
    cmds:
      - uv run pytest tests/benchmarks/ -v

  default:
    desc: "Show available tasks"
    cmds:
      - task --list
