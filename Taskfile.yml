version: "3"

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

tasks:
  check:build:
    desc: "Validate native build prerequisites"
    internal: true
    cmds:
      - |
        bash -euo pipefail <<'EOF'
        check_cmd() {
          local cmd="$1"
          local hint="${2:-Install the ${cmd} tool before continuing.}"
          if ! command -v "${cmd}" >/dev/null 2>&1; then
            echo "Missing required tool '${cmd}'. ${hint}" >&2
            exit 1
          fi
        }

        check_cmd rustc "Install Rust via https://rustup.rs/"
        check_cmd cargo "Install Rust via https://rustup.rs/"

        if ! command -v clang >/dev/null 2>&1 && ! command -v gcc >/dev/null 2>&1; then
          echo "Missing required C/C++ compiler. Install clang or gcc and try again." >&2
          exit 1
        fi

        check_cmd cmake "Install cmake (e.g. 'brew install cmake')."
        check_cmd uv "Install uv from https://github.com/astral-sh/uv."
        EOF

  setup:
    desc: "Install dependencies with uv"
    deps:
      - check:build
    cmds:
      - uv sync --all-packages --all-extras --all-groups
      - prek install && prek install --hook-type commit-msg

  update:
    desc: "Update the dependencies"
    cmds:
      - uv run uv-bump
      - cd comparative-benchmarks && uv run uv-bump && cd -
      - uv sync --all-packages --all-extras --all-groups --upgrade
      - prek autoupdate

  test:
    desc: "Run tests with pytest"
    cmds:
      - uv run pytest

  test:cov:
    desc: "Run tests with coverage"
    cmds:
      - uv run pytest --cov

  lint:
    desc: "Lint code with ruff and docs with markdownlint"
    cmds:
      - prek run --all-files

  docs:build:
    desc: "Build documentation"
    cmds:
      - uv run mkdocs build --clean --strict

  docs:serve:
    desc: "Serve documentation locally"
    cmds:
      - uv run mkdocs serve

  docker:build-base:
    desc: "Build base Docker image"
    cmds:
      - docker build -t kreuzberg:base --build-arg EXTRAS="cli" -f .docker/Dockerfile .

  docker:build-core:
    desc: "Build core Docker image"
    cmds:
      - docker build -t kreuzberg:core --build-arg EXTRAS="cli crypto document-classification langdetect additional-extensions" -f .docker/Dockerfile .

  docker:build-full:
    desc: "Build full Docker image with all extras + LibreOffice"
    cmds:
      - docker build -t kreuzberg:full --build-arg EXTRAS="all" -f .docker/Dockerfile .

  docker:build-all:
    desc: "Build all Docker images"
    cmds:
      - task: docker:build-base
      - task: docker:build-core
      - task: docker:build-full

  docker:test:
    desc: "Run Docker E2E tests"
    cmds:
      - python tests/e2e/docker_e2e.py

  docker:test-image:
    desc: "Test specific Docker image (usage: task docker:test-image IMAGE=kreuzberg:base)"
    cmds:
      - python tests/e2e/docker_e2e.py --image {{.IMAGE}}

  default:
    desc: "Show available tasks"
    cmds:
      - task --list
